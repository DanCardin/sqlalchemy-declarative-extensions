[tool.poetry]
name = "sqlalchemy-declarative-extensions"
version = "0.15.3"
authors = ["Dan Cardin <ddcardin@gmail.com>"]

description = "Library to declare additional kinds of objects not natively supported by SQLAlchemy/Alembic."
license = "Apache-2.0"
repository = "https://github.com/dancardin/sqlalchemy-declarative-extensions"
readme = 'README.md'

keywords = [
  "sqlalchemy",
  "alembic",
  "declarative",

  "mysql",
  "postgresql",
  "snowflake",
  "sqlite",

  "schema",
  "role",
  "grant",
  "view",
  "function",
  "trigger",
]
classifiers = [
  "Topic :: Software Development :: Libraries :: Python Modules",
]

include = [
    "py.typed",
    "*.md",
]
packages = [
    { include = "sqlalchemy_declarative_extensions", from = "src" },
]

[tool.poetry.dependencies]
python = ">=3.8,<4"

sqlalchemy = ">=1.3"

sqlglot = {version = "*", optional = true}
alembic = ">=1.0"

[tool.poetry.group.dev.dependencies]
alembic-utils = "0.8.1"
coverage = ">=5"
mypy = "1.8.0"
pymysql = {version = "*", extras = ["rsa"]}
pytest = ">=7"
pytest-alembic = "*"
pytest-mock-resources = { version = ">=2.6.13", extras = ["docker"] }
pytest-xdist = "*"
ruff = "^0.5.0"
sqlalchemy = {version = ">=1.4", extras = ["mypy"]}
psycopg = "*"
psycopg2-binary = "*"

# snowflake
fakesnow = {version = "~0.9.21", python = ">=3.9"}
snowflake-connector-python = {version = ">=3.7", python = ">=3.9"}
snowflake-sqlalchemy = {version = ">=1.6.0", python = ">=3.9"}
filelock = {version = "*", python = ">=3.9"}
numpy = {version = ">=1.26", python = ">=3.9"}

[tool.poetry.extras]
alembic = ["alembic"]
parse = ["sqlglot"]

[tool.mypy]
strict_optional = true
ignore_missing_imports = true
warn_unused_ignores = false
implicit_reexport = true
incremental = true
plugins = ['sqlalchemy.ext.mypy.plugin']
exclude = "tests/examples"

[tool.coverage.report]
show_missing = true
skip_covered = true
exclude_lines = [
  "pragma: no cover",
  "if TYPE_CHECKING:",
  "if __name__ == .__main__.:",
]

[tool.coverage.run]
include = ["src/*"]
branch = true
parallel = true

[tool.pytest.ini_options]
doctest_optionflags = "NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL ELLIPSIS"
addopts = "--doctest-modules -vv --ff --strict-markers"
norecursedirs = ".* build dist *.egg bin tests/examples --junitxml=junit.xml"
filterwarnings = [
  'error',
  'ignore:invalid escape sequence.*',
  'ignore:distutils Version classes are deprecated. Use packaging.version instead.:DeprecationWarning',
  'ignore:_SixMetaPathImporter.find_spec.*:ImportWarning',
  'ignore:`ignore_views` is deprecated, use `ignore` instead:DeprecationWarning',
  'ignore:The GenericFunction.*:sqlalchemy.exc.SAWarning',
  'ignore:Did not recognize type.*:sqlalchemy.exc.SAWarning',
]
pytester_example_dir = "tests/examples"
markers = [
    'grant',
    'schema',
    'role',
    'row',
    'alembic',
]
pmr_multiprocess_safe = true
log_level = 'WARNING'
log_cli_level = 'WARNING'

[tool.ruff]
src = ["src", "tests"]
target-version = "py37"

[tool.ruff.lint]
select = ["C", "D", "E", "F", "I", "N", "Q", "RET", "RUF", "S", "T", "UP", "YTT"]
ignore = ["C901", "E501", "S101"]
extend-select = ["D"]
extend-ignore = [
    "D1",

    "D203",
    "D204",
    "D213",
    "D215",
    "D400",
    "D404",
    "D406",
    "D407",
    "D408",
    "D409",
    "D413",
]

[tool.ruff.lint.isort]
known-first-party = ["sqlalchemy_declarative_extensions", "tests"]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["D", "S", 'RUF012']

[build-system]
requires = ["poetry_core>=1.0.8"]
build-backend = "poetry.core.masonry.api"
